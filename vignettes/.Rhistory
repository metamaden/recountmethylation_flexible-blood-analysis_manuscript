dfii
dfiter.mp
iterv <- c(2, 100, 500, 1000, 2000, 5000, 10000)
set.seed(0)
dfiter.mp <- do.call(rbind, lapply(iterv, function(iteri){
lrii <- music_prop(bulk.eset = bulk.eset, sc.eset = sc.eset,
clusters = "cellTypeNew", samples = "donor",
iter.max = iteri, verbose = FALSE)
dfii <- reshape2::melt(lrii$Est.prop.weighted)
colnames(dfii) <- c("sample", "cell.type", "music.original")
dfii$num.iter <- iteri
dfii$cell.type <- as.character(dfii$cell.type)
dfii$sample <- as.character(dfii$sample)
dfii
}))
dfiter.mp
dft <- ctpb$df.truefract
df.rmse <- do.call(rbind,
lapply(unique(dfiter$num.iter), function(num.iter){
dfi <- dfiter[dfiter$num.iter == num.iter,]
sapply(unique(dfi$cell.type), function(celli){
dfti <- dft[dft$cell==celli,]
dfii <- dfi[dfi$cell.type==celli,]
dfii <- dfii[order(match(dfii$sample, dfti$sample)),]
sqrt(mean((dfii$`lrii$p.weight`-dfti$true.fract)^2))
})
}))
df.rmse <- as.data.frame(df.rmse)
df.rmse$num.iter <- iterv
df.rmse
iterv <- unique(dfiter.mp$num.iter)
dft <- ctpb$df.truefract
df.rmse.samp.mp <- do.call(rbind,
lapply(unique(dfiter.mp$num.iter), function(num.iter){
dfi <- dfiter.mp[dfiter.mp$num.iter == num.iter,]
sapply(unique(dfi$sample), function(sampi){
dfti <- dft[dft$sample==sampi,]
dfii <- dfi[dfi$sample==sampi,]
dfii <- dfii[order(match(dfii$cell.type, dfti$cell.type)),]
sqrt(mean((dfii$`lrii$p.weight`-dfti$true.fract)^2))
})
}))
df.rmse.samp.mp <- as.data.frame(df.rmse.samp.mp)
df.rmse.samp.mp$num.iter <- iterv
df.rmse.samp.mp
dfi <- dfiter.mp[dfiter.mp$num.iter == num.iter,]
dfi
dfti <- dft[dft$sample==sampi,]
dfii <- dfi[dfi$sample==sampi,]
dfii <- dfii[order(match(dfii$cell.type, dfti$cell.type)),]
dfii
dfti
class(dfti$cell)
iterv <- unique(dfiter.mp$num.iter)
dft <- ctpb$df.truefract; dft$cell <- as.character(dft$cell)
df.rmse.samp.mp <- do.call(rbind,
lapply(unique(dfiter.mp$num.iter), function(num.iter){
dfi <- dfiter.mp[dfiter.mp$num.iter == num.iter,]
sapply(unique(dfi$sample), function(sampi){
dfti <- dft[dft$sample==sampi,]
dfii <- dfi[dfi$sample==sampi,]
dfii <- dfii[order(match(dfii$cell.type, dfti$cell.type)),]
sqrt(mean((dfii$`lrii$p.weight`-dfti$true.fract)^2))
})
}))
df.rmse.samp.mp <- as.data.frame(df.rmse.samp.mp)
df.rmse.samp.mp$num.iter <- iterv
df.rmse.samp.mp
dfti <- dft[dft$sample==sampi,]
dfii <- dfi[dfi$sample==sampi,]
dfii <- dfii[order(match(dfii$cell.type, dfti$cell.type)),]
dftii
dfti
dftii
dfti
dft
dfti
dfii
order(match(dfii$cell.type, dfti$cell.type))
class(dfii$cell.type)
class(dfti$cell)
iterv <- unique(dfiter.mp$num.iter)
dft <- ctpb$df.truefract; dft$cell <- as.character(dft$cell)
df.rmse.samp.mp <- do.call(rbind,
lapply(unique(dfiter.mp$num.iter), function(num.iter){
dfi <- dfiter.mp[dfiter.mp$num.iter == num.iter,]
sapply(unique(dfi$sample), function(sampi){
dfti <- dft[dft$sample==sampi,]
dfii <- dfi[dfi$sample==sampi,]
dfii <- dfii[order(match(dfii$cell.type, dfti$cell)),]
sqrt(mean((dfii$`lrii$p.weight`-dfti$true.fract)^2))
})
}))
df.rmse.samp.mp <- as.data.frame(df.rmse.samp.mp)
df.rmse.samp.mp$num.iter <- iterv
df.rmse.samp.mp
dfti <- dft[dft$sample==sampi,]
dfii <- dfi[dfi$sample==sampi,]
dfii <- dfii[order(match(dfii$cell.type, dfti$cell)),]
dfti
dfii
dfti
dfii$music.original
iterv <- unique(dfiter.mp$num.iter)
dft <- ctpb$df.truefract; dft$cell <- as.character(dft$cell)
df.rmse.samp.mp <- do.call(rbind,
lapply(unique(dfiter.mp$num.iter), function(num.iter){
dfi <- dfiter.mp[dfiter.mp$num.iter == num.iter,]
sapply(unique(dfi$sample), function(sampi){
dfti <- dft[dft$sample==sampi,]
dfii <- dfi[dfi$sample==sampi,]
dfii <- dfii[order(match(dfii$cell.type, dfti$cell)),]
sqrt(mean((dfii[,3]-dfti$true.fract)^2))
})
}))
df.rmse.samp.mp <- as.data.frame(df.rmse.samp.mp)
df.rmse.samp.mp$num.iter <- iterv
df.rmse.samp.mp
df.rmse.mp <- do.call(rbind,
lapply(unique(dfiter$num.iter), function(num.iter){
dfi <- dfiter[dfiter$num.iter == num.iter,]
sapply(unique(dfi$cell.type), function(celli){
dfti <- dft[dft$cell==celli,]
dfii <- dfi[dfi$cell.type==celli,]
dfii <- dfii[order(match(dfii$sample, dfti$sample)),]
sqrt(mean((dfii[,3]-dfti$true.fract)^2))
})
}))
dfi <- dfiter[dfiter$num.iter == num.iter,]
celli
celli = "Astro"
dfti <- dft[dft$cell==celli,]
dfii <- dfi[dfi$cell.type==celli,]
dfii <- dfii[order(match(dfii$sample, dfti$sample)),]
dfti
dfii
dfi <- dfiter.mp[dfiter.mp$num.iter == num.iter,]
dfti <- dft[dft$cell==celli,]
dfii <- dfi[dfi$cell.type==celli,]
dfii <- dfii[order(match(dfii$sample, dfti$sample)),]
dfii
dfti
df.rmse.mp <- do.call(rbind,
lapply(unique(dfiter$num.iter), function(num.iter){
dfi <- dfiter.mp[dfiter.mp$num.iter == num.iter,]
sapply(unique(dfi$cell.type), function(celli){
dfti <- dft[dft$cell==celli,]
dfii <- dfi[dfi$cell.type==celli,]
dfii <- dfii[order(match(dfii$sample, dfti$sample)),]
sqrt(mean((dfii[,3]-dfti$true.fract)^2))
})
}))
df.rmse.mp <- as.data.frame(df.rmse.mp)
df.rmse.mp$num.iter <- iterv
df.rmse.mp
ltdf <- lapply(seq(ncol(bulk.eset)), function(ii){
yj <- as.matrix(rab.expr.bulk[, ii])
decon_music(yj, z, cell.sizes = smean, sigma.ct = sigma,
toc = 1e-2, rp = 1e-4, iter.max = 5, verbose = FALSE)
})
names(ltdf) <- colnames(bulk.eset)
lmi <- ltdf[[i]]
class(lmi)
ltdf <- lapply(seq(ncol(bulk.eset)), function(ii){
yj <- as.matrix(rab.expr.bulk[, ii])
decon_music(yj, z, cell.sizes = smean, sigma.ct = sigma,
toc = 1e-2, rp = 1e-4, iter.max = 5, verbose = FALSE)
})
names(ltdf) <- colnames(bulk.eset)
lmi <- ltdf[[1]]
class(lmi)
names(lmi)
ctv <- names(lmi$p.nnls)
dt <- ctpb$df.truefract
p.true <- dt[dt$sample=="donor6",c(1,3),drop = F]
rownames(p.true) <- p.true[,1]
p.true <- p.true[ctv, 2, drop = F]
dm <- cbind(lmi$p.nnls, cbind(lmi$p.weight, p.true))
colnames(dm) <- c("nnls", "music.tdf", "true")
dm
dft <- ctpb$df.truefract
dfm <- lmp$Est.prop.weighted
lmp <- music_prop(bulk.eset = bulk.eset, sc.eset = sc.eset,
clusters = "cellTypeNew", samples = "donor",
iter.max = 5)
dft <- ctpb$df.truefract
dfm <- lmp$Est.prop.weighted
dfr <- do.call(rbind, lapply(seq(length(ltdf)), function(ii){
sidi <- names(ltdf)[ii]
m1 <- ltdf[[ii]]$p.weight
m2 <- dfm[sidi,]
dfti <- dft[dft$sample==sidi,c(1,3)]
tv <- dfti[,2]; names(tv) <- dfti[,1]
tv <- tv[names(m2)]
dfr <- cbind(rep(sidi, length(m2)), cbind(tv, cbind(m1, m2)))
rownames(dfr) <- names(m2)
colnames(dfr) <- c("sample", "true", "music.tdf", "music.original")
dfr
}))
dfr
dfr <- as.data.frame(dfr, stringsAsFactors = F)
dft <- ctpb$df.truefract
dfm <- lmp$Est.prop.weighted
dfr <- do.call(rbind, lapply(seq(length(ltdf)), function(ii){
sidi <- names(ltdf)[ii]
m1 <- ltdf[[ii]]$p.weight
m2 <- dfm[sidi,]
dfti <- dft[dft$sample==sidi,c(1,3)]
tv <- dfti[,2]; names(tv) <- dfti[,1]
tv <- tv[names(m2)]
dfr <- cbind(rep(sidi, length(m2)), cbind(tv, cbind(m1, m2)))
rownames(dfr) <- names(m2)
colnames(dfr) <- c("sample", "true", "music.tdf", "music.original")
dfr
}))
dfr <- as.data.frame(dfr, stringsAsFactors = F)
dfr$true <- round(as.numeric(dfr$true), 4)
dfr$music.tdf <- round(as.numeric(dfr$music.tdf), 4)
dfr$music.original <- round(as.numeric(dfr$music.original), 4)
dfr
dft <- ctpb$df.truefract
dfm <- lmp$Est.prop.weighted
dfr <- do.call(rbind, lapply(seq(length(ltdf)), function(ii){
sidi <- names(ltdf)[ii]
m1 <- ltdf[[ii]]$p.weight
m2 <- dfm[sidi,]
dfti <- dft[dft$sample==sidi,c(1,3)]
tv <- dfti[,2]; names(tv) <- dfti[,1]
tv <- tv[names(m2)]
dfr <- cbind(rep(sidi, length(m2)), cbind(tv, cbind(m1, m2)))
rownames(dfr) <- names(m2)
colnames(dfr) <- c("sample", "true", "music.tdf", "music.original")
dfr
}))
dfr <- as.data.frame(dfr, stringsAsFactors = F)
dfr$true <- round(as.numeric(dfr$true), 4)
dfr$music.tdf <- round(as.numeric(dfr$music.tdf), 4)
dfr$music.original <- round(as.numeric(dfr$music.original), 4)
rownames(dfr) <- NULL
dfr
df.rmse.mp <- do.call(rbind,
lapply(unique(dfiter$num.iter), function(num.iter){
dfi <- dfiter.mp[dfiter.mp$num.iter == num.iter,]
sapply(unique(dfi$cell.type), function(celli){
dfti <- dft[dft$cell==celli,]
dfii <- dfi[dfi$cell.type==celli,]
dfii <- dfii[order(match(dfii$sample, dfti$sample)),]
sqrt(mean((dfii[,3]-dfti$true.fract)^2))
})
}))
df.rmse.mp <- as.data.frame(df.rmse.mp)
df.rmse.mp$num.iter <- iterv
df.rmse.mp
df.rmse.mp <- do.call(rbind,
lapply(unique(dfiter$num.iter), function(num.iter){
dfi <- dfiter.mp[dfiter.mp$num.iter == num.iter,]
sapply(unique(dfi$cell.type), function(celli){
dfti <- dft[dft$cell==celli,]
dfii <- dfi[dfi$cell.type==celli,]
dfii <- dfii[order(match(dfii$sample, dfti$sample)),]
round(sqrt(mean((dfii[,3]-dfti$true.fract)^2)), 3)
})
}))
df.rmse.mp <- as.data.frame(df.rmse.mp)
df.rmse.mp$num.iter <- iterv
df.rmse.mp
iterv <- unique(dfiter.mp$num.iter)
dft <- ctpb$df.truefract; dft$cell <- as.character(dft$cell)
df.rmse.samp.mp <- do.call(rbind,
lapply(unique(dfiter.mp$num.iter), function(num.iter){
dfi <- dfiter.mp[dfiter.mp$num.iter == num.iter,]
sapply(unique(dfi$sample), function(sampi){
dfti <- dft[dft$sample==sampi,]
dfii <- dfi[dfi$sample==sampi,]
dfii <- dfii[order(match(dfii$cell.type, dfti$cell)),]
round(sqrt(mean((dfii[,3]-dfti$true.fract)^2)), 3)
})
}))
df.rmse.samp.mp <- as.data.frame(df.rmse.samp.mp)
df.rmse.samp.mp$num.iter <- iterv
df.rmse.samp.mp
dft <- ctpb$df.truefract
df.rmse <- do.call(rbind,
lapply(unique(dfiter$num.iter), function(num.iter){
dfi <- dfiter[dfiter$num.iter == num.iter,]
sapply(unique(dfi$cell.type), function(celli){
dfti <- dft[dft$cell==celli,]
dfii <- dfi[dfi$cell.type==celli,]
dfii <- dfii[order(match(dfii$sample, dfti$sample)),]
round(sqrt(mean((dfii$`lrii$p.weight`-dfti$true.fract)^2)), 3)
})
}))
df.rmse <- as.data.frame(df.rmse)
df.rmse$num.iter <- iterv
df.rmse
iterv <- unique(dfiter$num.iter)
dft <- ctpb$df.truefract
df.rmse.samp <- do.call(rbind,
lapply(unique(dfiter$num.iter), function(num.iter){
dfi <- dfiter[dfiter$num.iter == num.iter,]
sapply(unique(dfi$sample), function(sampi){
dfti <- dft[dft$sample==sampi,]
dfii <- dfi[dfi$sample==sampi,]
dfii <- dfii[order(match(dfii$cell.type, dfti$cell)),]
sqrt(mean((dfii$`lrii$p.weight`-dfti$true.fract)^2))
})
}))
df.rmse.samp <- as.data.frame(df.rmse.samp)
df.rmse.samp$num.iter <- iterv
df.rmse.samp
iterv <- unique(dfiter$num.iter)
dft <- ctpb$df.truefract
df.rmse.samp <- do.call(rbind,
lapply(unique(dfiter$num.iter), function(num.iter){
dfi <- dfiter[dfiter$num.iter == num.iter,]
sapply(unique(dfi$sample), function(sampi){
dfti <- dft[dft$sample==sampi,]
dfii <- dfi[dfi$sample==sampi,]
dfii <- dfii[order(match(dfii$cell.type, dfti$cell)),]
round(sqrt(mean((dfii$`lrii$p.weight`-dfti$true.fract)^2)), 3)
})
}))
df.rmse.samp <- as.data.frame(df.rmse.samp)
df.rmse.samp$num.iter <- iterv
df.rmse.samp
ctv <- names(lmi$p.nnls)
dt <- ctpb$df.truefract
p.true <- dt[dt$sample=="donor6",c(1,3),drop = F]
rownames(p.true) <- p.true[,1]
p.true <- p.true[ctv, 2, drop = F]
dm <- cbind(lmi$p.nnls, cbind(lmi$p.weight, p.true))
colnames(dm) <- c("nnls", "music.tdf", "true")
dm$nnls <- round(dm$nnls, 3)
dm$music.tdf <- round(dm$music.tdf, 3)
dm$true <- round(dm$true, 3)
dm
da.m <- lmp$Est.prop.weighted
cond <- !identical(rownames(dm), colnames(da.m))
if(cond){da.m <- da.m[,rownames(dm)]}
dm <- cbind(dm, da.m[1,])
colnames(dm)[4] <- "music.original"
dm
da.m <- lmp$Est.prop.weighted
cond <- !identical(rownames(dm), colnames(da.m))
if(cond){da.m <- da.m[,rownames(dm)]}
dm <- cbind(dm, round(da.m[1,], 3))
colnames(dm)[4] <- "music.original"
dm$music.original <- round(dm$music.original, 3)
dm
dft
head(dft)
ii=1
sidi <- names(ltdf)[ii]
m1 <- ltdf[[ii]]$p.weight
m2 <- dfm[sidi,]
dfti <- dft[dft$sample==sidi,c(1,3)]
tv <- dfti[,2]; names(tv) <- dfti[,1]
tv <- tv[names(m2)]
dfr <- cbind(rep(sidi, length(m2)), cbind(tv, cbind(m1, m2)))
rownames(dfr) <- names(m2)
colnames(dfr) <- c("sample", "true", "music.tdf", "music.original")
dfr
dft <- ctpb$df.truefract
dfm <- lmp$Est.prop.weighted
dfr <- do.call(rbind, lapply(seq(length(ltdf)), function(ii){
sidi <- names(ltdf)[ii]
m1 <- ltdf[[ii]]$p.weight
m2 <- dfm[sidi,]
dfti <- dft[dft$sample==sidi,c(1,3)]
tv <- dfti[,2]; names(tv) <- dfti[,1]
tv <- tv[names(m2)]
dfr <- cbind(rep(sidi, length(m2)), cbind(tv, cbind(m1, m2)))
rownames(dfr) <- names(m2)
colnames(dfr) <- c("sample", "true", "music.tdf", "music.original")
dfr
}))
dfr$cell.type <- rownames(dfr)
dfr <- as.data.frame(dfr, stringsAsFactors = F)
dfr$true <- round(as.numeric(dfr$true), 3)
dft <- ctpb$df.truefract
dfm <- lmp$Est.prop.weighted
dfr <- do.call(rbind, lapply(seq(length(ltdf)), function(ii){
sidi <- names(ltdf)[ii]
m1 <- ltdf[[ii]]$p.weight
m2 <- dfm[sidi,]
dfti <- dft[dft$sample==sidi,c(1,3)]
tv <- dfti[,2]; names(tv) <- dfti[,1]
tv <- tv[names(m2)]
dfr <- cbind(rep(sidi, length(m2)), cbind(tv, cbind(m1, m2)))
rownames(dfr) <- names(m2)
colnames(dfr) <- c("sample", "true", "music.tdf", "music.original")
dfr
}))
dfr <- as.data.frame(dfr, stringsAsFactors = F)
dfr$cell.type <- rownames(dfr)
dfr$true <- round(as.numeric(dfr$true), 3)
dfr$music.tdf <- round(as.numeric(dfr$music.tdf), 3)
dfr$music.original <- round(as.numeric(dfr$music.original), 3)
rownames(dfr) <- NULL
dfr
dft <- ctpb$df.truefract
dfm <- lmp$Est.prop.weighted
dfr <- do.call(rbind, lapply(seq(length(ltdf)), function(ii){
sidi <- names(ltdf)[ii]
m1 <- ltdf[[ii]]$p.weight
m2 <- dfm[sidi,]
dfti <- dft[dft$sample==sidi,c(1,3)]
tv <- dfti[,2]; names(tv) <- dfti[,1]
tv <- tv[names(m2)]
dfr <- cbind(rep(sidi, length(m2)), cbind(tv, cbind(m1, m2)))
rownames(dfr) <- names(m2)
colnames(dfr) <- c("sample", "true", "music.tdf", "music.original")
dfr
}))
dfr <- as.data.frame(dfr, stringsAsFactors = F)
dfr$cell.type <- rownames(dfr)
dfr$true <- round(as.numeric(dfr$true), 3)
dfr$music.tdf <- round(as.numeric(dfr$music.tdf), 3)
dfr$music.original <- round(as.numeric(dfr$music.original), 3)
rownames(dfr) <- NULL
dfr[,c(5,1,2,3,4)]
da.m <- lmp$Est.prop.weighted
cond <- !identical(rownames(dm), colnames(da.m))
if(cond){da.m <- da.m[,rownames(dm)]}
dm <- cbind(dm, round(da.m[1,], 3))
colnames(dm)[4] <- "music.original"
dm$music.original <- round(dm$music.original, 3)
dm$cell.type <- rownames(dm)
dm
da.m <- lmp$Est.prop.weighted
cond <- !identical(rownames(dm), colnames(da.m))
if(cond){da.m <- da.m[,rownames(dm)]}
dm <- cbind(dm, round(da.m[1,], 3))
colnames(dm)[4] <- "music.original"
dm$music.original <- round(dm$music.original, 3)
dm$cell.type <- rownames(dm)
dm
lmp <- music_prop(bulk.eset = bulk.eset, sc.eset = sc.eset,
clusters = "cellTypeNew", samples = "donor",
iter.max = 5)
da.m <- lmp$Est.prop.weighted
cond <- !identical(rownames(dm), colnames(da.m))
if(cond){da.m <- da.m[,rownames(dm)]}
dm <- cbind(dm, round(da.m[1,], 3))
colnames(dm)[4] <- "music.original"
dm$music.original <- round(dm$music.original, 3)
dm$cell.type <- rownames(dm)
dm[,c()]
da.m <- lmp$Est.prop.weighted
cond <- !identical(rownames(dm), colnames(da.m))
if(cond){da.m <- da.m[,rownames(dm)]}
dm <- cbind(dm, round(da.m[1,], 3))
colnames(dm)[4] <- "music.original"
dm$music.original <- round(dm$music.original, 3)
dm$cell.type <- rownames(dm)
dm
knitr::opts_chunk$set(echo = TRUE)
library(recountmethylation)
library(minfi)
library(minfi)
?estimateCellCounts
library(minfiData)
BiocManager::install(minfiData)
BiocManager::install("minfiData")
data(MsetEx)
?estimateCellCounts
zdata_example <- function(z.dist, k.value, z.nfeat, force.yz.nonneg,
z.transformv, ltransform){
# get example z data (e.g. feature values by type)
#
#
#
message("getting example z datasets...")
z_original <- z_rescale <- NA
# get z data
z.dist.mean <- z.dist[1]; z.dist.var <- z.dist[2]
z_original <- do.call(cbind, lapply(seq(k.value), function(i){
z.dati <- rnorm(z.nfeat, z.dist.mean, z.dist.var)
if(force.yz.nonneg){z.dati[z.dati<0] <- -1*z.dati[z.dati<0]}
z.dati
}))
colnames(z_original) <- paste0("k_",seq(k.value))
# do z transformations
z.transformv <- z.transformv[z.transformv %in% c("s_rescale")]
if(length(z.transformv) > 0){z_rescale <- z_original}
if("s_rescale" %in% z.transformv){
message("transforming z using `s_rescale` method...")
lparam <- ltransform[["s_rescale"]]
if("factorv" %in% names(lparam)){
z_rescale <- s_rescale(z_rescale, factorv = lparam[["factorv"]],
constrain.nn = force.yz.nonneg)
} else if("meanv" %in% names(lparam) & "sdv" %in% names(lparam)){
z_rescale <- s_rescale(z_rescale, meanv = lparam[["meanv"]],
sdv = lparam[["sdv"]],
constrain.nn = force.yz.nonneg)
} else{
stop("invalid ltransform for chosen transformation method.")
}
}
if(is.na(z_rescale[1])){
z_rescale <- z_original} # parse rescale default
return(list(z_original = z_original, z_rescale = z_rescale))
}
zdata_example
z <- zdata_example()
print("hi")
print("hi ", "hi2")
print("hi "+"hi2")
cat("hi", "h2")
?cat
setwd("~/GitHub/recountmethylation_v2_manuscript/vignettes")
library(HDF5Array)
